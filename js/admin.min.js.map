{"version":3,"file":"admin.min.js","mappings":"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","sources":["webpack://signal/../../forms/js/form_exports.js","webpack://signal/./admin.js"],"sourcesContent":["import { getFieldValue } from  '../../../plugins/sim-plugin/includes/js/field_value.js';\n\nexport function removeDefaultSelect(el){\n\tArray.from(el.options).forEach(function(option){\n\t\toption.defaultSelected = false;\n\t});\n}\n\nlet tinymceSettings = [];\nfunction prepareForCloning(originalNode){\n\t//also remove any tinymce's\n\tif(typeof(tinymce) != 'undefined'){\n\t\toriginalNode.querySelectorAll('.wp-editor-area').forEach(el =>{\n\t\t\tlet tn = tinymce.get(el.id);\n\t\t\tif(tn != null){\n\t\t\t\ttinymceSettings[el.id] = tn.settings\n\t\t\t\ttn.save();\n\t\t\t\ttn.remove();\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function cloneNode(originalNode, clear=true){\n\tprepareForCloning(originalNode);\n\t\n\t//make a clone\n\tlet newNode = originalNode.cloneNode(true);\n\n\t// remove niceselect drop down from clone\n\tnewNode.querySelectorAll('.nice-select').forEach(dropdown => dropdown.remove());\n\t\n\t//add tinymce's again\n\toriginalNode.querySelectorAll('.wp-editor-area').forEach(el =>{\n\t\tif(tinymceSettings[el.id] != undefined){\n\t\t\ttinymce.init(tinymceSettings[el.id]);\n\t\t}\n\t});\n\t\n\t//clear values in the clone\n\tif(clear){\n\t\tnewNode.querySelectorAll('input,select,textarea').forEach(input => {\n\t\t\tif(input.type == 'checkbox' || input.type == 'radio'){\n\t\t\t\tinput.checked = false;\n\t\t\t}else if(!input.matches('.no-reset') ){\n\t\t\t\tinput.value = \"\";\n\t\t\t}\n\t\t\t\n\t\t\t//if this is a select\n\t\t\tif(input.type == \"select-one\"){\n\t\t\t\t//remove any defaults\n\t\t\t\tremoveDefaultSelect(input);\n\t\t\t}\n\t\t});\n\t}\n\n\tnewNode.querySelectorAll('select').forEach(select => {\n\t\t//remove any defaults\n\t\tremoveDefaultSelect(select);\n\n\t\tMain.attachNiceSelect(select);\n\t});\n\t\n\treturn newNode;\n}\n\nexport function copyFormInput(originalNode){\n\tlet newNode = cloneNode(originalNode);\n\t\n\t//update the data index\n\tnewNode.querySelectorAll('.upload-files').forEach(function(uploadButton){\n\t\tuploadButton.dataset.index = nodeNr;\n\t})\n\t\n\t//Clear contents of any document preview divs.\n\tnewNode.querySelectorAll('.documentpreview').forEach(function(previewDiv){\n\t\tpreviewDiv.innerHTML = '';\n\t});\n\n\t//Select\n\tlet i = 0;\n\tnewNode.querySelectorAll('select').forEach(select => {\n\t\t//Find the value of the select we have cloned\n\t\tlet previousVal = originalNode.getElementsByTagName('select')[i].selectedIndex;\n\t\t\n\t\t//Hide the value in the clone\n\t\tif(select.options[previousVal] != undefined){\n\t\t\tselect.options[previousVal].style.display = 'none';\n\t\t}\n\t\t\n\t\t//Add nice select\n\t\tMain.attachNiceSelect(select);\n\t\t\n\t\ti++;\n\t});\n\t\n\t//Add remove buttons if they are not there\n\tif(originalNode.querySelector('.remove') == null && newNode.querySelector('.remove') == null){\n \t\tlet html = `<button type=\"button\" class=\"remove button\" style=\"flex: 1;\">-</button>`;\n\n\t\t//Add minus button to the first div\n\t\toriginalNode.querySelector('.button-wrapper').insertAdjacentHTML('beforeend', html);\n\n\t\t//Add minus button to the second div\n\t\tnewNode.querySelector('.button-wrapper').insertAdjacentHTML('beforeend', html)\n\t}\t\n\n\t// process tab buttons\n\tif(originalNode.matches('.tabcontent')){\n\t\t// Hide original\n\t\toriginalNode.classList.add('hidden');\n\n\t\t// Add button for the new one\n\t\tlet orgButton\t= originalNode.closest('.clone-divs-wrapper').querySelector(`.tablink.active`);\n\t\tlet newButton\t= cloneNode(orgButton);\n\n\t\t// make the org butto inactive\n\t\torgButton.classList.remove('active');\n\n\t\t//Insert the clone\n\t\torgButton.parentNode.insertBefore(newButton, orgButton.nextSibling);\n\t}\n\t\n\t//Insert the clone\n\toriginalNode.parentNode.insertBefore(newNode, originalNode.nextSibling);\n\t\n\treturn newNode;\n}\n\nexport function fixNumbering(wrapper){\n\twrapper.querySelectorAll(':scope > .clone-div').forEach(updateNumbers);\n\n\twrapper.querySelectorAll(':scope > .tablink').forEach(updateNumbers);\n\n\tfunction updateNumbers(clone, index){\n\t\t//Update the new number\t\n\n\t\t// Update the ID\n\t\tif(clone.id != ''){\n\t\t\tclone.id = clone.id.replace(/[0-9]+(?!.*[0-9])/, index);\n\t\t}\n\t\t\n\t\t// Update the content\n\t\tif(clone.type == 'button' && clone.textContent != ''){\n\t\t\tclone.textContent \t\t= clone.textContent.replace(/[0-9]+(?!.*[0-9])/, index + 1);\n\n\t\t\tclone.dataset.target\t= clone.dataset.target.replace(/[0-9]+(?!.*[0-9])/, index);\n\t\t}\n\n\t\t// Update the divid attribute\n\t\tif(clone.dataset.divid  != null){\n\t\t\tclone.dataset.divid = index;\n\t\t}\n\t\t\n\t\t//Update the title\n\t\tclone.querySelectorAll('h3, h4, legend :first-child').forEach(el => {\n\t\t\tel.textContent = el.textContent.replace(/[0-9]+(?!.*[0-9])/, index + 1);\n\t\t});\n\t\t\n\t\t//Update the legend\n\t\t/* clone.querySelectorAll('legend').forEach(legend => {\n\t\t\tlegend.textContent = legend.textContent.replace(/[0-9]+(?!.*[0-9])/, ' '+(index+1));\n\t\t}); */\n\t\t\n\t\t//Update the elements\n\t\tclone.querySelectorAll('input,select,textarea').forEach(input => {\n\t\t\t//Do not copy nice selects\n\t\t\tif(!input.classList.contains('nice-select-search')){\n\t\t\t\t//Update the id\n\t\t\t\tif(input.id != '' && input.id != undefined){\n\t\t\t\t\tinput.id = input.id.replace(/[0-9]+(?!.*[0-9])/, index);\n\t\t\t\t}\n\t\t\t\t//Update the name\n\t\t\t\tif(input.name != '' && input.name != undefined){\n\t\t\t\t\tinput.name = input.name.replace(/[0-9]+(?!.*[0-9])/, index);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Reset the select to the default\n\t\t\t\tif(input.type == 'button'){\n\t\t\t\t\tinput.value = input.value.replace(/[0-9]+(?!.*[0-9])/, index);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function removeNode(target){\n\tlet node\t\t\t= target.closest(\".clone-div\");\n\tlet parentNode\t\t= node.closest('.clone-divs-wrapper');\n\tlet allCloneDivs\t= parentNode.querySelectorAll('.clone-div');\n\t\n\t//Check if we are removing the last element\n\tif(allCloneDivs[allCloneDivs.length-1] == node){\n\t\tlet addElement = node.querySelector(\".add\");\n\t\t\n\t\t//Move the add button one up\n\t\tlet prev = node.previousElementSibling;\n\t\tif(prev.querySelector('.button-wrapper .add') == null){\n\t\t\tprev.querySelector('.button-wrapper').appendChild(addElement);\n\t\t}\n\t}\n\n\t// check if we need to remove a corresponding tab button\n\tif(node.matches('.tabcontent')){\n\t\tlet buttonToRemove\t= parentNode.querySelector(`.tablink[data-target=\"${node.id}\"]`);\n\t\tif(buttonToRemove != null){\n\t\t\t//if the button is active, make the previous one active\n\t\t\tif(buttonToRemove.classList.contains('active')){\n\t\t\t\tlet prevButton\t= buttonToRemove.previousElementSibling;\n\t\t\t\tif(prevButton != null){\n\t\t\t\t\tprevButton.classList.add('active');\n\t\t\t\t\t\n\t\t\t\t\t//show the corresponding tab\n\t\t\t\t\tMain.displayTab(prevButton);\n\t\t\t\t}else{\n\t\t\t\t\t//try the next one\n\t\t\t\t\tlet nextButton\t= buttonToRemove.nextElementSibling;\n\t\t\t\t\tif(nextButton != null){\n\t\t\t\t\t\tnextButton.classList.add('active');\n\t\t\t\t\t\t\n\t\t\t\t\t\t//show the corresponding tab\n\t\t\t\t\t\tMain.displayTab(nextButton);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//remove the button\n\t\t\tbuttonToRemove.remove();\n\t\t}\n\t}\n\n\t\n\t//Remove the node\n\tnode.remove();\n\n\t//If there is only one div remaining, remove the remove button\n\tif(parentNode.querySelectorAll('.clone-div').length == 1){\n\t\tlet removeElement = parentNode.querySelector('.remove');\n\t\tremoveElement.remove();\n\t}\n\n\tfixNumbering(parentNode)\n}\n\n/* \n\tFUNCTIONS USED BY DYNAMIC FORMS JS\n */\nexport function tidyMultiInputs(){\n\t//remove unnecessary buttons on inputs with multiple values\n\tdocument.querySelectorAll('.clone-divs-wrapper').forEach( function(div){\n\t\tlet cloneDivArr\t= div.querySelectorAll(':scope > .clone-div');\n\t\t\n\t\tif(cloneDivArr.length == 1){\n\t\t\tcloneDivArr[0].querySelectorAll('.remove').forEach(el=>el.remove());\n\t\t}\n\t\t\n\t\tcloneDivArr.forEach(function(cloneDiv, index, array){\n\t\t\t//update dataset\n\t\t\tcloneDiv.dataset.divid = index;\n\t\t\t\n\t\t\t//remove add button for all but the last\n\t\t\tif(index != array.length - 1){\n\t\t\t\t// Select all add buttons but not the any nested buttons\n\t\t\t\tcloneDiv.querySelectorAll('.add:not(:scope .clone-divs-wrapper .add)').forEach(el=>el.remove());\n\t\t\t}\n\t\t})\n\t});\n}\n\nexport function updateMultiStepControls(form){\n\t// get active formsteps amount\n\tlet formsteps\t\t\t= form.querySelectorAll('.formstep');\n\tlet visibleFormsteps\t= form.querySelectorAll('.formstep:not(.hidden)');\n\tlet stepIndicators\t\t= form.querySelectorAll('.multi-step-controls-wrapper .step');\n\n\t// show all step circles\n\tstepIndicators.forEach(el => el.classList.remove('hidden'));\n\n\t// hide some step circles if needed\n\tfor(let x = visibleFormsteps.length; x < formsteps.length; x++){\n\t\tstepIndicators[x].classList.add('hidden');\n\t}\n\n\t// check if this is the last visible\n\tlet activeFormstep\t\t= form.querySelector('.formstep:not(.step-hidden)');\n\tif(visibleFormsteps[visibleFormsteps.length-1] == activeFormstep){\n\t\t// make the submit button visible\n\t\tform.querySelector('.nextBtn').classList.add('hidden');\n\t\tform.querySelector('.form-submit ').classList.remove('hidden');\n\t}else{\n\t\tform.querySelector('.nextBtn').classList.remove('hidden');\n\t\tform.querySelector('.form-submit ').classList.add('hidden');\n\t}\n}\n\t\n//show a next form step\nexport function showTab(n, form) {\n\tif(typeof(form) != 'undefined'){\n\t\tif(n == 0){\n\t\t\tlet loader = form.querySelector('.loader-wrapper:not(.hidden)' );\n\t\t\t//hide loader\n\t\t\tif(loader != null){\n\t\t\t\tloader.classList.add('hidden');\n\t\t\t\n\t\t\t\t//show form controls\n\t\t\t\tform.querySelector('.multistepcontrols').classList.remove('hidden');\n\t\t\t}\n\t\t}\n\t\t\n\t\t//hide all formsteps\n\t\tform.querySelectorAll('.formstep:not(.step-hidden)').forEach(step=>step.classList.add('step-hidden'));\n\t\t\n\t\t// Show the specified formstep of the form ...\n\t\tlet x = form.getElementsByClassName(\"formstep\");\n\t\t\n\t\tif(x.length == 0){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//scroll back to top\n\t\tlet y = x[n].offsetTop - document.querySelector(\"#masthead\").offsetHeight\n\t\twindow.scrollTo({ top: y, behavior: 'auto'});\n\t\t\n\t\t//show\n\t\tx[n].classList.remove('step-hidden');\n\n\t\t// This function removes the \"active\" class of all steps...\n\t\tform.querySelectorAll(\".step.active\").forEach(el=>{el.classList.remove('active');});\n\n\t\t//... and adds the \"active\" class to the current step:\n\t\tx = form.getElementsByClassName(\"step\");\n\t\ttry{\n\t\t\tx[n].classList.add(\"active\");\n\t\t}catch(err) {\n\t\t\tconsole.log(x);\n\t\t\tconsole.log(n);\n\t\t  \tconsole.error(err.message);\n\t\t}\n\t\t\n\n\t\t// ... and fix the Previous/Next buttons:\n\t\tif (n == 0) {\n\t\t\tform.querySelector('[name=\"prevBtn\"]').classList.add('hidden');\n\t\t} else {\n\t\t\tform.querySelector('[name=\"prevBtn\"]').classList.remove('hidden');\n\t\t}\n\n\t\tif (n == (x.length - 1)) {\n\t\t\tform.querySelector('[name=\"nextBtn\"]').classList.add('hidden');\n\t\t\tform.querySelector('.form-submit').classList.remove('hidden');\n\t\t} else {\n\t\t\tform.querySelector('[name=\"nextBtn\"]').classList.remove('hidden');\n\t\t\tform.querySelector('.form-submit').classList.add('hidden');\n\t\t}\n\t}else{\n\t\tconsole.log('no form defined');\n\t}\n\t\t\n}\n\n//next form step clicked\nexport function nextPrev(n, form) {\n\t// This function will figure out which tab to display\n\tlet x \t\t\t\t= form.querySelectorAll(\".formstep\");\n\tlet stepIndicators\t= form.querySelectorAll(\".step\");\n\tlet currentTab\t\t= 0;\n\tlet valid\t\t\t= true;\n\n\t// Find the current active tab\n\tx.forEach((el, index)=>{if(!el.matches('.step-hidden')){currentTab = index}});\n\t\n\t//Check validity of this step if going forward\n\tif(n>0){\n\t\t// Report validity of each required field\n\t\tlet elements\t= x[currentTab].querySelectorAll('.required:not(.hidden) input, .required:not(.hidden) textarea, .required:not(.hidden) select');\n\t\tfor(const element of elements) {\n\t\t\tif(\n\t\t\t\telement.closest('.hidden')\t== null\t&&\n\t\t\t\telement.closest('div.nice-select') == null && \n\t\t\t\t(\n\t\t\t\t\telement.type != 'file' || \n\t\t\t\t\telement.closest('.file-upload-wrap').querySelector('.documentpreview input') == null\n\t\t\t\t)\n\t\t\t){\n\t\t\t\telement.required\t= true;\n\t\t\t\tvalid\t\t\t\t= element.reportValidity();\n\t\t\t\tif(!valid){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(!valid) return;\n\t\t\n\t\t//mark the last step as finished\n\t\tstepIndicators[currentTab].classList.add(\"finish\");\n\t}else{\n\t\t//mark the last step as unfinished\n\t\tstepIndicators[currentTab].classList.remove(\"finish\");\n\t}\n\t\n\t//loop over all the formsteps to hide stepindicators of them if needed\n\tArray.from(x).forEach((formstep,index) =>{\n\t\tif(formstep.classList.contains('hidden')){\n\t\t\t//hide the corresponding circle\n\t\t\tstepIndicators[index].classList.add('hidden');\n\t\t}\n\t});\n\n\t// Increase or decrease the current tab by 1:\n\tcurrentTab = currentTab + n;\n\t\n\t//check if the next tab is hidden\n\twhile(x[currentTab].classList.contains('hidden')){\n\t\t//go to the next tab\n\t\tcurrentTab = currentTab + n;\n\n\t\tif (currentTab >= x.length) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// if you have reached the end of the form... :\n\tif (currentTab >= x.length) {\n\t\treturn false;\n\t}\n\t// Otherwise, display the correct tab:\n\tshowTab(currentTab,form);\n\n\treturn true;\n}\n\nexport function changeFieldValue(selector, value, functionRef, form, addition='', forceValue=false){\n\tif(value == undefined){\n\t\treturn;\n\t}\n\n\tlet name\t\t= '';\n\tlet target\t\t= '';\n\n\tif(selector instanceof Element){\n\t\ttarget\t\t= selector;\n\t\tname\t\t= target.name;\n\t\tif(target.id == ''){\n\t\t\tselector\t= `[name^=\"${target.name}\" i]`;\n\t\t}else{\n\t\t\tselector\t= `[id^=${target.id}]`;\n\t\t}\n\t\t\n\t}else{\n\t\ttarget \t\t= form.querySelector(selector);\n\n\t\ttry{\n\t\t\tname\t\t= target.name;\n\t\t}catch{\n\t\t\tconsole.log(target);\n\t\t}\n\t}\n\n\tlet oldValue\t= getFieldValue(target, form, false, value);\n\t// nothing to change\n\tif(oldValue == value){\n\t\treturn;\n\t}\n\n\t// Check if we are dealing with a multi input field\n\tif(target == null){\n\t\tlet targets \t= form.querySelectorAll(`.clone-div [name^=\"${name}\" i]`);\n\t\tif(targets.length === 0){\n\t\t\treturn;\n\t\t}else if(targets.length == 1){\n\t\t\ttarget\t= targets[0];\n\t\t\ttargets\t= '';\n\t\t}else{\n\t\t\ttarget\t= targets[0];\n\n\t\t\ttargets.forEach((el, index) =>{\n\t\t\t\tif(index == 0){\n\t\t\t\t\tchangeFieldValue(el, '', '', form);\n\t\t\t\t}else{\n\t\t\t\t\tremoveNode(el);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t// calculate the new value\n\tif(addition != ''){\n\t\t// check if a date\n\t\tif (/\\d{4}-\\d{2}-\\d{2}/.test(value)){\n\t\t\tlet date\t= new Date(value);\n\t\t\tdate.setDate(date.getDate() + parseInt(addition));\n\t\t\tvalue\t= date.toISOString().split('T')[0];\n\t\t}else{\n\t\t\tvalue\t= value + parseInt(addition);\n\t\t}\n\t}\n\t\n\tif(target.type == 'radio' || target.type == 'checkbox'){\n\t\t// uncheck all\n\t\tif(value == ''){\n\t\t\tif(selector != ''){\n\t\t\t\tform.querySelectorAll(selector).forEach(el=>el.checked=false);\n\t\t\t}\n\t\t}else{\n\t\t\t// Check if the current target is the one we need to check\n\t\t\tif(target.value.toLowerCase() == value.toLowerCase()){\n\t\t\t\ttarget.checked = true;\n\t\t\t}else{\n\t\t\t\t// find the element with the given value and check it\n\t\t\t\tlet targets = form.querySelectorAll(`[name=\"${name}\" i]`);\n\t\t\t\tfor (const element of targets) {\n\t\t\t\t\tif(element.value.toLowerCase() == value.toLowerCase()){\n\t\t\t\t\t\telement.checked = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t//the target has a list attached to it\n\t}else if(target.type == 'date'){\n\t\ttarget.value = value;\n\t\t\n\t\t// convert a date to the right format\n\t\tif (!/\\d{4}-\\d{2}-\\d{2}/.test(value)){\n\t\t\tlet splitted = '';\n\t\t\tif(value.split('-').length == 3){\n\t\t\t\tsplitted\t= value.split('-');\n\t\t\t}else if(value.split('/').length == 3){\n\t\t\t\tsplitted\t= value.split('/');\n\t\t\t}\n\n\t\t\tif(splitted != ''){\n\t\t\t\tlet year;\n\t\t\t\tlet month;\n\t\t\t\tlet day;\n\t\t\t\tsplitted.forEach(nr=>{\n\t\t\t\t\tif(nr.length == 4){\n\t\t\t\t\t\tyear\t= nr;\n\t\t\t\t\t}else if(nr.length == 2){\n\t\t\t\t\t\tif(nr > 12){\n\t\t\t\t\t\t\tday\t= nr;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t// does not have a value yet\n\t\t\t\t\t\t\tif(month == undefined){\n\t\t\t\t\t\t\t\tmonth\t= nr;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tday\t= nr;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif(day != undefined && month != undefined && year != undefined){\n\t\t\t\t\ttarget.value = `${year}-${month}-${day}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else if(target.list != null){\n\t\tlet dataListOption = target.list.querySelector(`[data-value=\"${value}\" i]`);\n\n\t\t//we found a match\n\t\tif(dataListOption != null){\n\t\t\t// We found a cloned field, add as many inputs as needed\n\t\t\tif(target.closest('.clone-div') != null){\n\t\t\t\t// mark the existing ones for deletion, we can delete right now as we need to copy the existing ones first\n\t\t\t\ttarget.closest('.clone-divs-wrapper').querySelectorAll('.clone-div').forEach(el=>el.classList.add('shouldremove'));\n\n\t\t\t\tlet clone;\n\t\t\t\tdataListOption.value.split(';').forEach(val=>{\n\t\t\t\t\tclone = copyFormInput(target.closest('.clone-div'));\n\n\t\t\t\t\tclone.classList.remove('shouldremove');\n\n\t\t\t\t\tchangeFieldValue(clone.querySelector(target.tagName), val, '', form, '', true);\n\t\t\t\t});\n\n\t\t\t\tfixNumbering(target.closest('.clone-divs-wrapper'));\n\n\t\t\t\t// delete the old ones\n\t\t\t\ttarget.closest('.clone-divs-wrapper').querySelectorAll('.shouldremove').forEach(el=>el.remove());\n\t\t\t}else{\n\t\t\t\ttarget.value = dataListOption.value;\n\t\t\t}\n\t\t// We did not find a match, we are filling in the given value\n\t\t}else if(forceValue){\n\t\t\ttarget.value = value;\n\t\t// We did not find a match, empty value\n\t\t}else{\n\t\t\ttarget.value = '';\n\t\t}\n\t}else{\n\t\ttarget.value = value;\n\t}\n\t\n\t//create a new event\n\tlet evt = new Event('input');\n\t//attach the target\n\ttarget.dispatchEvent(evt);\n\t\n\t//run the originating function with this event\n\tif(typeof functionRef == 'function'){\n\t\tfunctionRef(target);\n\t}\n}\n\nexport function changeVisibility(action, el, functionRef){\n\tlet wrapper\t= el.closest('.input-wrapper');\n\tif(wrapper == null){\n\t\twrapper\t= el\n\t}\n\t\n\tif(action == 'add'){\n\t\tif(wrapper.matches('.hidden')){\n\t\t\treturn;\n\t\t}\n\t\twrapper.classList.add('hidden');\n\t}else{\n\t\tif(!wrapper.matches('.hidden')){\n\t\t\treturn;\n\t\t}\n\t\twrapper.classList.remove('hidden');\n\t}\n\n\t//create a new event\n\tlet evt = new Event('input');\n\t//attach the target\n\twrapper.dispatchEvent(evt);\n\t\n\t//run the originating function with this event\n\tif(typeof functionRef == 'function'){\n\t\tfunctionRef(el);\n\t}\n}\n\nexport function changeFieldProperty(selector, att, value, functionRef, form, addition=''){\n\t//first change the value\n\tlet target = form.querySelector(selector);\n\n\t// calculate the new value\n\tif(addition != ''){\n\t\t// check if a date\n\t\tif (/\\d{4}-\\d{2}-\\d{2}/.test(value)){\n\t\t\tlet date\t= new Date(value);\n\t\t\tdate.setDate(date.getDate() + parseInt(addition));\n\t\t\tvalue\t= date.toISOString().split('T')[0];\n\t\t}else{\n\t\t\tvalue\t= value + parseInt(addition);\n\t\t}\n\t}\n\n\ttarget[att] = value;\n\t\n\t//create a new event\n\tlet evt = new Event('input');\n\n\t//attach the target\n\ttarget.dispatchEvent(evt);\n\n\t//run the originating function with this event\n\tfunctionRef(target);\n}","import {copyFormInput, fixNumbering, removeNode} from '../../forms/js/form_exports.js';\r\n\r\ndocument.addEventListener('click', function(event) {\r\n\tlet target = event.target;\r\n\t\r\n\t//add element\r\n\tif(target.matches('.add')){\r\n\t\tcopyFormInput(target.closest(\".clone-div\"));\r\n\r\n\t\tfixNumbering(target.closest('.clone-divs-wrapper'));\r\n\r\n\t\ttarget.remove();\r\n\t}\r\n\t\r\n\t//remove element\r\n\tif(target.matches('.remove')){\r\n        console.log(target);\r\n\t\t//Remove node clicked\r\n\t\tremoveNode(target);\r\n\t}\r\n});\r\n"],"names":["removeDefaultSelect","el","Array","from","options","forEach","option","defaultSelected","tinymceSettings","cloneNode","originalNode","clear","querySelectorAll","tn","tinymce","get","id","settings","save","remove","prepareForCloning","newNode","dropdown","undefined","init","input","type","checked","matches","value","select","Main","attachNiceSelect","fixNumbering","wrapper","updateNumbers","clone","index","replace","textContent","dataset","target","divid","classList","contains","name","document","addEventListener","event","uploadButton","nodeNr","previewDiv","innerHTML","i","previousVal","getElementsByTagName","selectedIndex","style","display","querySelector","html","insertAdjacentHTML","add","orgButton","closest","newButton","parentNode","insertBefore","nextSibling","copyFormInput","console","log","node","allCloneDivs","length","addElement","prev","previousElementSibling","appendChild","buttonToRemove","prevButton","displayTab","nextButton","nextElementSibling","removeNode"],"sourceRoot":""}